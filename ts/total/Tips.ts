/////    ove dve linije koda predstavljaju lose resenje
// async function retry(
//     fn: () => Promise<any>,

async function retry<T>(
    fn: () => Promise<T>,
    // retries: number = 5
    retries: number
) {
    try {
        return await fn()
    } catch (err) {
        if (retries > 0) {
            console.log('Retrying ...');
            return await retry(fn, retries - 1)
        }
        throw err;
    }
}


// retry(() => Promise.resolve('hello')).then(str => {
//     console.log(str);
// })


retry(() => Promise.resolve('hello'), 5).then(str => {
    console.log(str);
})


/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////


declare function useStatuses<T>(statuses: T[]): T
const loadingStatus = useStatuses(['loading', 'idle']) // const loadingStatus: string

declare function useStatuses2<const T>(statuses: T[]): T
const loadingStatus2 = useStatuses2(['loadiong', 'idle']) // const loadingStatus2: "idle" | "loadiong"


/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////




// type NoInfer<T> = [T][T extends any ? 0 : never] // ovo je custom resenje za NoInfer

declare function createFSM<TState extends string>(
    config: {
        initial: TState;
        statuses: TState[]
    }): TState

const example1 = createFSM({ // const example1: "not-allowed" | "open" | "closed"
    initial: 'not-allowed', // not-allowed ne moze da bud initial state, taj problem se resava sa NoInfer
    statuses: ['open', 'closed']
})

declare function createFSM2<TState extends string>(config: {
    initial: NoInfer<TState>;
    statuses: TState[]
}): TState

const example2 = createFSM2({ // const example2: "open" | "closed"
    initial: 'open',
    statuses: ['open', 'closed']
})


/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////

const roles = ['user', 'admin', 'superadmin'] as const
type RoleAttempt1 = typeof roles
type RoleAttempt2 = (typeof roles) [0|1|2] // type RoleAttempt2 = "user" | "admin" | "superadmin"  // resenje koje nije skalabilno
type Role = (typeof roles)[number] // type Role = "user" | "admin" | "superadmin"



/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////   const  TypeScript feature
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////

const routes = {
    home: '/',
    admin :'/admin',
    users: '/users'
} as const 

// routes.admin = 'wwfwfw' // kada se kroisti as const for routes ovo ne moze

console.log(routes.admin);
type Route = (typeof routes) [keyof typeof routes] // type Route = "/" | "/admin" | "/users"

const goToRoute = (route:Route) =>{
console.log(route);
}

goToRoute('/admin') // ovde intelisence radi perfektno

